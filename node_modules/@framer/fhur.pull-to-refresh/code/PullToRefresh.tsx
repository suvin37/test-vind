import * as React from "react"
import { useState, useLayoutEffect } from "react"
import {
    Frame,
    useCycle,
    addPropertyControls,
    ControlType,
    useAnimation,
    useMotionValue,
    MotionValue,
    useTransform,
} from "framer"

import { cubicBezier } from "./cubicBezier"
import { DefaultSpinner } from "./DefaultSpinner"

const easingFunction = cubicBezier(0, 0, 0.65, 1.05)

// Open Preview (CMD + P)
// API Reference: https://www.framer.com/api

const calcProgress = (
    height: number,
    startY: number | undefined,
    endY: number | undefined
): number => {
    if (!startY || !endY) {
        return 0
    }
    const delta = Math.min(Math.max(endY - startY, 1) / height, 1)

    return easingFunction(delta)
}

const calculateMargin = (progress: number, maxRefreshHeight: number) => {
    return progress * maxRefreshHeight
}

interface Props {
    maxRefreshHeight: number
    snapBackDuration: number
    progressDuration: number
    progressIndicator: JSX.Element
}

export const PullToRefresh: React.SFC<Props> = props => {
    const controls = useAnimation()
    const progressIndicatorControls = useAnimation()
    const [startY, setStartY] = useState<number>()

    const y = useMotionValue(0)
    const tx: MotionValue<number> = useTransform(y, y => y / 3)

    const onRelease = async e => {
        setStartY(undefined)

        await progressIndicatorControls.start({
            rotate: 360,
            transition: {
                from: 0,
                duration: props.progressDuration,
            },
        })

        controls.start({
            y: 0,
            transition: {
                duration: props.snapBackDuration,
            },
        })
    }

    return (
        <div
            onMouseDown={e => {
                setStartY(e.pageY)
            }}
            onMouseMove={e => {
                if (startY) {
                    const newY = calculateMargin(
                        calcProgress(window.innerHeight, startY, e.pageY),
                        props.maxRefreshHeight
                    )
                    y.set(newY)
                }
            }}
            onMouseUp={onRelease}
            onMouseLeave={onRelease}
            style={{
                width: "100%",
                height: "100%",
                position: "relative",
                background: "yellow",
            }}
        >
            <DefaultSpinner animate={progressIndicatorControls} y={tx} />

            <Frame
                animate={controls}
                style={{
                    position: "absolute",
                    top: 0,
                    width: "100%",
                    height: "100%",
                    background: "gray",
                }}
                y={y}
            >
                {props.children}
            </Frame>
        </div>
    )
}

PullToRefresh.defaultProps = {
    maxRefreshHeight: 200,
    snapBackDuration: 0.1,
    progressDuration: 1,
    progressIndicator: (
        <div
            style={{
                backgroundColor: "white",
                width: "100%",
                height: "200px",
                position: "absolute",
                top: 0,
            }}
        >
            loading...
        </div>
    ),
}

addPropertyControls(PullToRefresh, {
    maxRefreshHeight: {
        type: ControlType.Number,
        min: 0,
        max: 1000,
        title: "Max Refresh Height",
        defaultValue: PullToRefresh.defaultProps.maxRefreshHeight,
    },
    snapBackDuration: {
        type: ControlType.Number,
        min: 0,
        max: 5,
        step: 0.1,
        displayStepper: true,
        defaultValue: PullToRefresh.defaultProps.snapBackDuration,
    },
    progressDuration: {
        type: ControlType.Number,
        defaultValue: PullToRefresh.defaultProps.progressDuration,
    },
    progressIndicator: {
        type: ControlType.ComponentInstance,
        title: "Progress Indicator",
    },
})
